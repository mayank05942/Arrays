In a range query , our task is to calculate a value based on a subarray of an array. Typical range queries are:

• sum q ( a,b ): calculate the sum of values in range [ a,b ]
• min q ( a,b ): find the minimum value in range [ a,b ]
• max q ( a,b ): find the maximum value in range [ a,b ]

______________________________________________________________________________________________________________________________________

Sum queries in static array using prefix sum:
===============================================

Prob: https://leetcode.com/problems/range-sum-query-immutable/
____________________________________________

We can easily process sum queries on a static array by constructing a prefix sum array . Each value in the prefix sum array equals
the sum of values in the original array up to that position, i.e., the value at position k is sum q (0 ,k ). The prefix sum array can
be constructed in O ( n ) time.

Since the prefix sum array contains all values of sum q (0 ,k ), we can calculate any
value of sum q ( a,b ) in O (1) time as follows:

sum q ( a,b ) = sum q (0 ,b ) − sum q (0 ,a − 1)

Code:
------

class NumArray:

    def __init__(self, nums: List[int]):
        self.nums = nums
        self.prefix_sum = []
        add = 0
        for i in range(len(self.nums)):
            add += nums[i]
            self.prefix_sum.append(add)
        
        

    def sumRange(self, i: int, j: int) -> int:
        #print(self.prefix_sum)
        if  i == 0:                         # when i is 0 then [i-1] will be equal to -1
            return self.prefix_sum[j]
        else:
            return self.prefix_sum[j] - self.prefix_sum[i-1]
            
____________________________________________________________________________________________________________________________________

2D static Range query:
######################

Prob: https://leetcode.com/problems/range-sum-query-2d-immutable/

Explanation: https://www.youtube.com/watch?v=PwDqpOMwg6U
_______________________________________________________________________________________________________________________________

Code:
------

class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        if not matrix:
            return 
        self.dp = []
        self.matrix = matrix
        
        for i in range(len(self.matrix)+1):
            self.dp.append([0]*(len(self.matrix[0])+1))
        
        for i in range(1,len(self.matrix)+1):
            for j in range(1,len(self.matrix[0])+1):
               self.dp[i][j] = self.dp[i][j] = self.dp[i][j-1] + self.dp[i-1][j] + self.matrix[i-1][j-1] -self.dp[i-1][j-1]
        
        print(self.dp)
            
        
        

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        
        row1, col1, row2, col2 = row1+1, col1+1, row2+1, col2+1
      
        return self.dp[row2][col2] - self.dp[row2][col1-1] - self.dp[row1-1][col2] + self.dp[row1-1][col1-1]
        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)

