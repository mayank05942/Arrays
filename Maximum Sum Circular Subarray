Prob: https://leetcode.com/problems/maximum-sum-circular-subarray/

Note: This is a follow up question on Kadane's algo:

Prob: https://leetcode.com/problems/maximum-subarray/
______________________________________________________________________________

Explanation: https://www.youtube.com/watch?v=kd0-hUwISDo

Note: Explanined in NOTES also

__________________________________________________________________________________-
Code:

class Solution:
    def maxSubarraySumCircular(self, arr: List[int]) -> int:
        
        def kadane(A):
            global_sum = A[0]
            local_sum = A[0]

            for i in range(1,len(A)):
                local_sum = max(A[i]+local_sum,A[i])
                global_sum = max(local_sum,global_sum)
            return global_sum
        
        #step1 - If max_sum is in middle part:
        
        kadane_max = kadane(arr)
        
        # step - 2 If max_sum is in circular array:
        B = [-x for x in arr]
        
        kadane_min = kadane(B)
        
        if sum(arr) + kadane_min == 0:   # why + because we have inverted the signs before
            return kadane_max
        else:
            return max(kadane_max,sum(arr)+kadane_min)
        
        
       
        
     
        
